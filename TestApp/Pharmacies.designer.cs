#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestApp
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PharmaciesController")]
	public partial class PharmaciesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertbutch(butch instance);
    partial void Updatebutch(butch instance);
    partial void Deletebutch(butch instance);
    partial void Insertstorage(storage instance);
    partial void Updatestorage(storage instance);
    partial void Deletestorage(storage instance);
    partial void Insertgood(good instance);
    partial void Updategood(good instance);
    partial void Deletegood(good instance);
    partial void Insertpharmacy(pharmacy instance);
    partial void Updatepharmacy(pharmacy instance);
    partial void Deletepharmacy(pharmacy instance);
    #endregion
		
		public PharmaciesDataContext() : 
				base(global::TestApp.Properties.Settings.Default.PharmaciesControllerConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PharmaciesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PharmaciesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PharmaciesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PharmaciesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<butch> butches
		{
			get
			{
				return this.GetTable<butch>();
			}
		}
		
		public System.Data.Linq.Table<storage> storages
		{
			get
			{
				return this.GetTable<storage>();
			}
		}
		
		public System.Data.Linq.Table<good> goods
		{
			get
			{
				return this.GetTable<good>();
			}
		}
		
		public System.Data.Linq.Table<pharmacy> pharmacies
		{
			get
			{
				return this.GetTable<pharmacy>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.butches")]
	public partial class butch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _butch_id;
		
		private int _good_id;
		
		private int _storage_id;
		
		private int _amount;
		
		private EntityRef<storage> _storage;
		
		private EntityRef<good> _good;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onbutch_idChanging(int value);
    partial void Onbutch_idChanged();
    partial void Ongood_idChanging(int value);
    partial void Ongood_idChanged();
    partial void Onstorage_idChanging(int value);
    partial void Onstorage_idChanged();
    partial void OnamountChanging(int value);
    partial void OnamountChanged();
    #endregion
		
		public butch()
		{
			this._storage = default(EntityRef<storage>);
			this._good = default(EntityRef<good>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_butch_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int butch_id
		{
			get
			{
				return this._butch_id;
			}
			set
			{
				if ((this._butch_id != value))
				{
					this.Onbutch_idChanging(value);
					this.SendPropertyChanging();
					this._butch_id = value;
					this.SendPropertyChanged("butch_id");
					this.Onbutch_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_good_id", DbType="Int NOT NULL")]
		public int good_id
		{
			get
			{
				return this._good_id;
			}
			set
			{
				if ((this._good_id != value))
				{
					if (this._good.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ongood_idChanging(value);
					this.SendPropertyChanging();
					this._good_id = value;
					this.SendPropertyChanged("good_id");
					this.Ongood_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_storage_id", DbType="Int NOT NULL")]
		public int storage_id
		{
			get
			{
				return this._storage_id;
			}
			set
			{
				if ((this._storage_id != value))
				{
					if (this._storage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onstorage_idChanging(value);
					this.SendPropertyChanging();
					this._storage_id = value;
					this.SendPropertyChanged("storage_id");
					this.Onstorage_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Int NOT NULL")]
		public int amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="storage_butch", Storage="_storage", ThisKey="storage_id", OtherKey="storage_id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public storage storage
		{
			get
			{
				return this._storage.Entity;
			}
			set
			{
				storage previousValue = this._storage.Entity;
				if (((previousValue != value) 
							|| (this._storage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._storage.Entity = null;
						previousValue.butches.Remove(this);
					}
					this._storage.Entity = value;
					if ((value != null))
					{
						value.butches.Add(this);
						this._storage_id = value.storage_id;
					}
					else
					{
						this._storage_id = default(int);
					}
					this.SendPropertyChanged("storage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="good_butch", Storage="_good", ThisKey="good_id", OtherKey="good_id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public good good
		{
			get
			{
				return this._good.Entity;
			}
			set
			{
				good previousValue = this._good.Entity;
				if (((previousValue != value) 
							|| (this._good.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._good.Entity = null;
						previousValue.butches.Remove(this);
					}
					this._good.Entity = value;
					if ((value != null))
					{
						value.butches.Add(this);
						this._good_id = value.good_id;
					}
					else
					{
						this._good_id = default(int);
					}
					this.SendPropertyChanged("good");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.storages")]
	public partial class storage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _storage_id;
		
		private int _pharmacy_id;
		
		private string _title;
		
		private EntitySet<butch> _butches;
		
		private EntityRef<pharmacy> _pharmacy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onstorage_idChanging(int value);
    partial void Onstorage_idChanged();
    partial void Onpharmacy_idChanging(int value);
    partial void Onpharmacy_idChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    #endregion
		
		public storage()
		{
			this._butches = new EntitySet<butch>(new Action<butch>(this.attach_butches), new Action<butch>(this.detach_butches));
			this._pharmacy = default(EntityRef<pharmacy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_storage_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int storage_id
		{
			get
			{
				return this._storage_id;
			}
			set
			{
				if ((this._storage_id != value))
				{
					this.Onstorage_idChanging(value);
					this.SendPropertyChanging();
					this._storage_id = value;
					this.SendPropertyChanged("storage_id");
					this.Onstorage_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pharmacy_id", DbType="Int NOT NULL")]
		public int pharmacy_id
		{
			get
			{
				return this._pharmacy_id;
			}
			set
			{
				if ((this._pharmacy_id != value))
				{
					if (this._pharmacy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onpharmacy_idChanging(value);
					this.SendPropertyChanging();
					this._pharmacy_id = value;
					this.SendPropertyChanged("pharmacy_id");
					this.Onpharmacy_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(256)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="storage_butch", Storage="_butches", ThisKey="storage_id", OtherKey="storage_id")]
		public EntitySet<butch> butches
		{
			get
			{
				return this._butches;
			}
			set
			{
				this._butches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="pharmacy_storage", Storage="_pharmacy", ThisKey="pharmacy_id", OtherKey="pharmacy_id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public pharmacy pharmacy
		{
			get
			{
				return this._pharmacy.Entity;
			}
			set
			{
				pharmacy previousValue = this._pharmacy.Entity;
				if (((previousValue != value) 
							|| (this._pharmacy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._pharmacy.Entity = null;
						previousValue.storages.Remove(this);
					}
					this._pharmacy.Entity = value;
					if ((value != null))
					{
						value.storages.Add(this);
						this._pharmacy_id = value.pharmacy_id;
					}
					else
					{
						this._pharmacy_id = default(int);
					}
					this.SendPropertyChanged("pharmacy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_butches(butch entity)
		{
			this.SendPropertyChanging();
			entity.storage = this;
		}
		
		private void detach_butches(butch entity)
		{
			this.SendPropertyChanging();
			entity.storage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.goods")]
	public partial class good : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _good_id;
		
		private string _title;
		
		private EntitySet<butch> _butches;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ongood_idChanging(int value);
    partial void Ongood_idChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    #endregion
		
		public good()
		{
			this._butches = new EntitySet<butch>(new Action<butch>(this.attach_butches), new Action<butch>(this.detach_butches));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_good_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int good_id
		{
			get
			{
				return this._good_id;
			}
			set
			{
				if ((this._good_id != value))
				{
					this.Ongood_idChanging(value);
					this.SendPropertyChanging();
					this._good_id = value;
					this.SendPropertyChanged("good_id");
					this.Ongood_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="good_butch", Storage="_butches", ThisKey="good_id", OtherKey="good_id")]
		public EntitySet<butch> butches
		{
			get
			{
				return this._butches;
			}
			set
			{
				this._butches.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_butches(butch entity)
		{
			this.SendPropertyChanging();
			entity.good = this;
		}
		
		private void detach_butches(butch entity)
		{
			this.SendPropertyChanging();
			entity.good = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.pharmacies")]
	public partial class pharmacy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pharmacy_id;
		
		private string _title;
		
		private string _addr;
		
		private string _phone;
		
		private EntitySet<storage> _storages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onpharmacy_idChanging(int value);
    partial void Onpharmacy_idChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnaddrChanging(string value);
    partial void OnaddrChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    #endregion
		
		public pharmacy()
		{
			this._storages = new EntitySet<storage>(new Action<storage>(this.attach_storages), new Action<storage>(this.detach_storages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pharmacy_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int pharmacy_id
		{
			get
			{
				return this._pharmacy_id;
			}
			set
			{
				if ((this._pharmacy_id != value))
				{
					this.Onpharmacy_idChanging(value);
					this.SendPropertyChanging();
					this._pharmacy_id = value;
					this.SendPropertyChanged("pharmacy_id");
					this.Onpharmacy_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_addr", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string addr
		{
			get
			{
				return this._addr;
			}
			set
			{
				if ((this._addr != value))
				{
					this.OnaddrChanging(value);
					this.SendPropertyChanging();
					this._addr = value;
					this.SendPropertyChanged("addr");
					this.OnaddrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="pharmacy_storage", Storage="_storages", ThisKey="pharmacy_id", OtherKey="pharmacy_id")]
		public EntitySet<storage> storages
		{
			get
			{
				return this._storages;
			}
			set
			{
				this._storages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_storages(storage entity)
		{
			this.SendPropertyChanging();
			entity.pharmacy = this;
		}
		
		private void detach_storages(storage entity)
		{
			this.SendPropertyChanging();
			entity.pharmacy = null;
		}
	}
}
#pragma warning restore 1591
